use college_db;
db.Student.drop();

// sample documents
db.Student.insertMany([
  { Roll_No: 'T101', Name: 'A', class: 'TE', dept: 'CS', aggregate_marks: 420 },
  { Roll_No: 'T102', Name: 'B', class: 'TE', dept: 'IT', aggregate_marks: 380 },
  { Roll_No: 'S201', Name: 'C', class: 'SE', dept: 'CS', aggregate_marks: 450 },
  { Roll_No: 'B301', Name: 'D', class: 'BE', dept: 'CS', aggregate_marks: 510 },
  { Roll_No: 'B302', Name: 'E', class: 'BE', dept: 'IT', aggregate_marks: 490 }
]);

// 1. total marks of TE class department-wise
var map1 = function(){ if(this.class === 'TE') emit(this.dept, this.aggregate_marks); };
var reduceSum = function(k, vals){ return Array.sum(vals); };
db.Student.mapReduce(map1, reduceSum, { out: { inline: 1 } });

// 2. highest marks of SE class department-wise
var map2 = function(){ if(this.class === 'SE') emit(this.dept, this.aggregate_marks); };
var reduceMax = function(k, vals){ return Array.max(vals); };
db.Student.mapReduce(map2, reduceMax, { out: { inline: 1 } });

// 3. average marks of BE class department-wise
var map3 = function(){ if(this.class === 'BE') emit(this.dept, {sum: this.aggregate_marks, count: 1}); };
var reduceAvg = function(k, vals){
  var res = { sum: 0, count: 0 };
  vals.forEach(function(v){ res.sum += v.sum; res.count += v.count; });
  return res;
};
var finalizeAvg = function(k, v){ return v.sum / v.count; };
db.Student.mapReduce(map3, reduceAvg, { out: { inline: 1 }, finalize: finalizeAvg });
